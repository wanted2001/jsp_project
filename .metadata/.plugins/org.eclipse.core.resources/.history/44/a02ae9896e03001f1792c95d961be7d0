package com.ezen.test.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.ezen.test.domain.MemberVO;
import com.ezen.test.service.MemberService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("/member/*")
@Slf4j
@RequiredArgsConstructor
public class MemberController {

	private final MemberService msv;

	@GetMapping("/register")
	public void register() {

	}

	@PostMapping("/register")
	public String register(MemberVO mvo) {
		log.info("MemberVO >> {}", mvo);
		int isOk = msv.insert(mvo);
		return "index";
	}

	@GetMapping("/login")
	public void login() {

	}

	@PostMapping("/login")
	public String login(MemberVO mvo, HttpServletRequest request, Model m) {
		log.info("MemberVO >> {}", mvo);

		// mvo 객체가 DB의 값과 일치하는 객체 가져오기
		MemberVO loginmvo = msv.isUser(mvo);
		log.info("MemberVO >> {}", loginmvo);

		if (loginmvo != null) {
			// 로그인 성공시,
			HttpSession ses = request.getSession();
			ses.setAttribute("ses", loginmvo);
			ses.setMaxInactiveInterval(10 * 60);
		} else {
			// 로그인 실패시,
			m.addAttribute("msg_login", "1");
		}
		return "index";
	}

	@GetMapping("logout")
	public String logout(HttpServletRequest request, Model m) {
		// 라스트 로그인 업데이트 => 세션 객체 삭제 후 세션 끊기
		MemberVO mvo = (MemberVO) request.getSession().getAttribute("ses");
		msv.LastLoginUpdate(mvo.getId());

		request.getSession().removeAttribute("ses");
		request.getSession().invalidate();
		m.addAttribute("msg_logout", "1");
		return "index";
	}

	@GetMapping("modify")
	public void modify() {

	}

	@PostMapping("modify")
	public String modify(MemberVO mvo) {
		log.info("MemberVO >> {}", mvo);
		msv.modify(mvo);
		return "redirect:/member/logout";
	}
	
	@GetMapping("delete")
	public String delete(int id) {
		log.info("id>> {}", id);
		msv.delete(id);
		return "redirect:/member/logout";
	}
	// post방식 : 리소스의 생성 또는 수정하기 위해 데이터를 전송할 때 사용하는 메서드로 body에 전송할 데이터를 담아서 전달 (전달 방식: http body  /  get방식 보다 보안 위협으로부터 안전함)
	// get방식 : 클라이언트에서 서버로 어떤 정보 요청할 때 사용되는 메서드로 리소스로부터 결과 받아와 '데이터 조회'할 때 많이 사용된다. (전달 방식: url  /  단점_보안 취약)

}
