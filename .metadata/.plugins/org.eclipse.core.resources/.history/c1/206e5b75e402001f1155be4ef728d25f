package com.ezen.test.service;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.ezen.test.domain.MemberVO;
import com.ezen.test.repository.MemberDAO;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@RequiredArgsConstructor
public class MemberServiceImpl implements MemberService {

	private final MemberDAO mdao;

	final BCryptPasswordEncoder passwordEncoder;

	@Override
	public int insert(MemberVO mvo) {
		// 아이디가 중복되는지 확인
		// 아이디만 주고 DB에서 일치하는 Mvo 객체를 리턴 => 있으면 가입실패 없으면 가입가능
		MemberVO tempmvo = mdao.getUser(mvo.getId());
		if (tempmvo != null) {
			return 0;
		}
		log.info("member service insert in!!");
		// 아이디가 중복되지 않는다면 회원가입 진행.
		// password가 null 이거나 같이 없다면
		if (mvo.getId() == null || mvo.getId().length() == 0) {
			return 0;
		}
		if (mvo.getPw() == null || mvo.getPw().length() == 0) {
			return 0;
		}
		// 회원가입 진행
		// password 암호화하여 기입
		// encode() : 암호화를 진행하는 메서드
		// matches(입력한 비번, 암호화된 비번) : true/ false
//		String pw = mvo.getPw();
//		String encodePw = passwordEncoder.encode(pw);
//		mvo.setPw(encodePw);
		mvo.setPw(passwordEncoder.encode(mvo.getPw()));

		// 회원가입
		int isOk = mdao.insert(mvo);

		return isOk;

	}

	@Override
	public MemberVO isUser(MemberVO mvo) {
		// 로그인 유저 확인
		MemberVO tempmvo = mdao.getUser(mvo.getId()); // 회원가입 했을때 있던 메서드 활용

		// 해당 아이디가 없다면
		if (tempmvo == null) {
			return null;
		}

		// matches(원래비번, 암호화된 비번)
		if (passwordEncoder.matches(mvo.getPw(), tempmvo.getPw())) {
			return tempmvo;
		}
		return null;
	}

	@Override
	public void LastLoginUpdate(String id) {
		mdao.LastLoginUpdate(id);
	}

	@Override
	public void modify(MemberVO mvo) {
		// pw 여부에 따라 변경사랑을 나누어서 처리
		
	}

}
