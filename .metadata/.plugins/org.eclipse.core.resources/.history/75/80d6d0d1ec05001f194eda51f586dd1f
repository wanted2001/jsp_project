package com.ezen.test.handler;

import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.apache.tika.Tika;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import com.ezen.test.domain.FileVO;

import lombok.extern.slf4j.Slf4j;
import net.coobird.thumbnailator.Thumbnails;

@Slf4j
@Component
public class FileHandler {
	
	// 실제 파일이 저장되는 경로
	private final String UP_DIR="C:\\YJM\\_myproject\\_java\\_fileUpload";
	

	public List<FileVO> uploadFiles(MultipartFile[] files) {
		// 리턴 객체 생성
		List<FileVO> flist = new ArrayList<FileVO>();
		
		// MultipartFile 배열을 받아서 FileVO 형태로 List로 리턴 할것이다.
		// 오늘 날짜로 경로 생성(가변형태로 저장) 년 월 일 폴더를 구성 
		
		// 오늘 날짜 경로 생성
		LocalDate date =LocalDate.now();
		String today = date.toString();
		log.info("today>> {}" ,today);
		
		// 오늘 날짜를 폴더로 구성
		today = today.replace("-",File.separator);
		//"C:\\YJM\\_myproject\\_java\\_fileUpload\\2024\\04\\29"
		File folders = new File(UP_DIR, today);
		// 폴더 생성 => mkdir (폴더 1개 생성) , mkdirs(하위 폴더까지 생성)
		// 있는지 없는지 확인 => exists
		if(!folders.exists()) {
			folders.mkdirs(); //폴더 생성
		}
		
		// 리스트 설정
		for(MultipartFile file : files) {
			FileVO fvo = new FileVO();
			fvo.setSave_dir(today);
			fvo.setFile_size(file.getSize()); // return long
			
			// getOriginalFilename() : 파일의 실제명 + 경로 포함 파일 경로를 포함하는 케이스도 있음.
			String originalFileName = file.getOriginalFilename();
			String onlyFileName = originalFileName.substring(originalFileName.lastIndexOf(File.separator)+1);
			
			fvo.setFile_name(onlyFileName);
			
			//UUID 생성
			UUID uuid = UUID.randomUUID();
			String uuidStr = uuid.toString();
			fvo.setUuid(uuidStr);
			
			// --------여기까지 fvo 셋팅 ---------------
			// bno,file_type
			
			// 디스크에 저장
			// 디스크에 저장할 파일 객체 생성 -> 저장
			// uuid_fileName / uuid_th_fileName
			String fullFileName = uuidStr+"_"+onlyFileName; // 파일 저장명
			File storedFile = new File(folders,fullFileName);
			
			// 저장 => 저장 경로 또는 파일이 없으면 IOException 발생
			try {
				file.transferTo(storedFile);
				if(isImageFile(storedFile)) {
					fvo.setFile_type(1);
					
					// 썸네일 생성
					File thumbNail = new File(folders,uuidStr+"_th_"+onlyFileName);
					Thumbnails.of(storedFile).size(75,75).toFile(thumbNail);
				}
				// 파일 타입을 결정  -> 이미지만 썸네일 저장
			} catch (Exception e) {
				log.info("파일 저장 에러");
				e.printStackTrace();
			}
			//list에 fvo 추가
			flist.add(fvo);
			
		}
		
		
		return flist;
	}
	
	// tika를 활용한 파일 형식 체크 -> 이미지 파일이 맞는지 확인 
	public boolean isImageFile(File storeFile) throws IOException {
		String mimeType = new Tika().detect(storeFile);
		
		return mimeType.startsWith("image") ? true : false;
	}

}
